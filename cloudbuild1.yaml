### #Airflow Env variables.
substitutions:
  _COMPOSER_REGION: asia-south1
  _COMPOSER_ENV_NAME: arflow-hasim
  _ROLLBACK: 'false'
  
  #   _SEVERITY: MEDIUM
#   _SEVERITY1: HIGH
#   _SEVERITY2: CRITICAL

  
# Access the id_github file from Secret Manager, and setup SSH
steps:
  - name: 'gcr.io/cloud-builders/git'
    secretEnv: ['SSH_KEY']
    entrypoint: 'bash'
    args:
    - -c
    - |
      echo "$$SSH_KEY" >> /root/.ssh/id_rsa
      chmod 400 /root/.ssh/id_rsa
      ssh-keyscan -t rsa github.com > known_hosts.github
      cp known_hosts.github /root/.ssh/known_hosts

# cat known_hosts.github 
    volumes:
    - name: 'ssh'
      path: /root/.ssh
  
# Clone the repository
  - name: 'gcr.io/cloud-builders/git'
    args:
    - clone
    - --recurse-submodules
    - git@github.com:Hasimk/cicd-sample.git
    volumes:
    - name: 'ssh'
      path: /root/.ssh

#   - name: gcr.io/cloud-builders/gcloud
#     entrypoint: /bin/bash
#     args:
#      - -c
#      - |
#        gcloud artifacts repositories set-cleanup-policy my-image6 \
#        --project=fg-dev-host \
#        --location=us \
#        --policy=policy.json \

 # Build the image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/fg-dev-host/my-image6:v1.7', '.']

# # Check the vulnerabilities and exit if it meets severity level
#   - id: scan
#     name: gcr.io/cloud-builders/gcloud
#     entrypoint: /bin/bash
#     args:
#      - -c
#      - |
#        gcloud artifacts docker images scan 'gcr.io/fg-dev-host/my-image6:v1.7' \
#        --format='value(response.scan)' > /workspace/docdags/scan_id.txt
       
#   - id: severity check2
#     name: gcr.io/cloud-builders/gcloud
#     entrypoint: /bin/bash
#     args:
#      - -c
#      - | 
#        gcloud artifacts docker images list-vulnerabilities \
#         $(cat /workspace/docdags/scan_id.txt) --format='value(vulnerability.effectiveSeverity)' \
#         | if grep -Fxq $_SEVERITY2 
#           then echo 'Failed vulnerability check - CRITICAL'
#           exit 1 
#           fi
          
#   - id: severity check1
#     name: gcr.io/cloud-builders/gcloud
#     entrypoint: /bin/bash
#     args:
#      - -c
#      - | 
#        gcloud artifacts docker images list-vulnerabilities \
#         $(cat /workspace/docdags/scan_id.txt) --format='value(vulnerability.effectiveSeverity)' \
#         | if grep -Fxq $_SEVERITY1
#           then echo 'Failed vulnerability check - HIGH'
#           exit 1 
#           fi

#   - id: severity check
#     name: gcr.io/cloud-builders/gcloud
#     entrypoint: /bin/bash
#     args:
#      - -c
#      - | 
#        gcloud artifacts docker images list-vulnerabilities \
#         $(cat /workspace/docdags/scan_id.txt) --format='value(vulnerability.effectiveSeverity)' \
#         | if grep -Fxq $_SEVERITY 
#           then echo 'Failed vulnerability check - MEDIUM'
#           exit 1 
#           fi
  
# Push the image to GCR
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/fg-dev-host/my-image6:v1.7']

# vulnerabiliy scan
  - name: 'gcr.io/cloud-builders/gcloud'
    args: ['beta', 'container', 'images', 'describe', 'gcr.io/fg-dev-host/my-image6:v1.7', '--format=json']

# Removing the old build Dags object
  - name: 'gcr.io/cloud-builders/gsutil'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gsutil -m rm -r gs://asia-south1-arflow-hasim-79c2d444-bucket/dags/*
  
 # No need to save in tar if it can be run like below
  - name: gcr.io/fg-dev-host/my-image6:v1.7
    entrypoint: /bin/bash
    args:
    - -c
    - |
      if [ "$_ROLLBACK" != "false" ]
      then
        cp -rv /dags/dags/*  /workspace/docdags/
        ls /workspace/docdags
      fi
                   
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
    - -c
    - |
     if [ "$_ROLLBACK" != "true" ]
     then
       echo "ROLLBACK NOT REQUIRED"
       for dagfile in $(ls dags)
             do
            gcloud composer environments storage dags import \
            --environment $_COMPOSER_ENV_NAME \
            --location $_COMPOSER_REGION \
            --source dags/$$dagfile
            done
     fi
     
     if [ "$_ROLLBACK" != "false" ]
     then
       echo "ROLLBACK In  PROGRESS"
       for dagfile in $(ls /workspace/docdags)
       do
            gcloud composer environments storage dags import \
            --environment $_COMPOSER_ENV_NAME \
            --location $_COMPOSER_REGION \
            --source /workspace/docdags/$$dagfile
       done
     fi
    
    
availableSecrets:
    secretManager:
    - versionName: projects/591981386330/secrets/SSH_KEY/versions/latest
      env: 'SSH_KEY'
